bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
bp(net = model2, input = m, output = y)
out(model2, m)
library(FroogNeuralNetwork)
model2 <- getFeedforward()
addLayer(model2, 2, 4, "tansig")
addLayer(model2, 4, 2, "purelim")
x <- matrix(data = c(1,2,3,4,5,6), nrow = 2, ncol = 3,byrow = TRUE)
y <- matrix(data = c(2,4,6,8,10,12), nrow = 2, ncol = 3, byrow = TRUE)
bp(net = model2, input = m, output = y)
library(FroogNeuralNetwork)
model2 <- getFeedforward()
addLayer(model2, 2, 4, "tansig")
addLayer(model2, 4, 2, "purelim")
bp(net = model2, input = m, output = y, epochs = 100,acceleration = "adam",acc_param = 0.9)
bp(net = model2, input = m, output = y, epochs = 100,acceleration = "momentum_rumelhart",acc_param = 0.9)
out(model2, x)
bp(net = model2, input = m, output = y, epochs = 100)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y, epochs = 100,acceleration = "momentum_rumelhart",acc_param = 0.9)
bp(net = model, input = m, output = y, epochs = 100,acceleration = "momentum_rumelhart",acc_param = 0.9)
bp(net = model, input = m, output = y, epochs = 100,acceleration = "momentum_rumelhart",acc_param = 0.9)
out(model, x)
a<-""
a
library(FroogNeuralNetwork)
is.na(ep)
ep <- NULL
is.na(ep)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y, epochs = 100, acceleration = "momentum_rumelhart", acc_param = 0.9)
bp(net = model, input = m, output = y, epochs = 100, acceleration = "momentum_rumelhart")
library(FroogNeuralNetwork)
bp(net = model, input = m, output = y, epochs = 100, acceleration = "momentum_rumelhart")
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y, epochs = 100, acceleration = "momentum_rumelhart")
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4, 2, "purelim")
bp(net = model, input = m, output = y)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
bp(net = model, input = m, output = y,epochs = 100,acceleration = "momentum",acc_param = 0.9)
library(FroogNeuralNetwork)
red <- getFeedforward()
addLayer(red, 2, 4, "tansig")
addLayer(red, 4, 2, "purelim")
x <- matrix(data = c(1,2,3,4,5,6),nrow = 2,ncol = 3, byrow = TRUE)
x
y <- matrix(data = c(2,4,6,8,10,12), nrow = 2, ncol = 3, byrow = TRUE)
y
bp(net = red, input = x)
bp(net = red, input = x, output = y,epochs = 100,acceleration = "momentum_rumelhart",acc_param = 0.9)
out(red, x)
bp(net = red, input = x, output = y,epochs = 100,acceleration = "momentum_rumelhart",acc_param = 0.9)
out(red, x)
red <- getFeedforward()
addLayer(red, 2, 4, "tansig")
addLayer(red, 4, 2, "purelim")
x <- matrix(data = c(1,2,3,4,5,6),nrow = 2,ncol = 3, byrow = TRUE)
x
y <- matrix(data = c(2,4,6,8,10,12), nrow = 2, ncol = 3, byrow = TRUE)
y
bp(red, x, y, 100, "momentum_rumelhart", 0.9)
bp(red, x, y, 100, "momentum_rumelhart", 0.9)
out(red, x)
red <- getFeedforward()
addLayer(red, 2, 4, "tansig")
addLayer(red, 4, 2, "purelim")
bp(red, x, y, 100, "momentum_rumelhart", 0.9)
bp(red, x, y, 100, "momentum_rumelhart", 0.9)
out(red, x)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2,4,"tansig")
addLayer(model, 4,2,"purelim")
bp(model, x,y)
bp(model, x,y,acceleration = "momentum")
bp(model, x,y,acceleration = "momentum_rumelhart")
a <- out(model, x)
a
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
sgd(model, x, y, epochs = 10, batch_size = 1)
sgd(model, x, y, epochs = 10, batch_size = 1, acceleration = "momentum_rumelhart", acc_param = 0.9)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
sgd(model, x, y, epochs = 10, batch_size = 1, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 10, batch_size = 1, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 10, batch_size = 1, acceleration = "momentum_rumelhart", acc_param = 0.9)
out(model, x)
out(model, x)
out(model, x)
out(model, x)
sgd(model, x, y, epochs = 10, batch_size = 1, acceleration = "momentum_rumelhart", acc_param = 0.9)
out(model, x)
out(model, x)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
sgd(model, x, y, epochs = 10, batch_size = 1, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 100, batch_size = 2, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 100, batch_size = 2, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 100, batch_size = 3, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 100, batch_size = 0, acceleration = "momentum_rumelhart", acc_param = 0.9)
out(model, x)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
sgd(model, x, y, epochs = 100, batch_size = 0, acceleration = "momentum_rumelhart", acc_param = 0.9)
sgd(model, x, y, epochs = 100, batch_size = 0, acceleration = "momentum_rumelhart", acc_param = 0.9)
out(model, x)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
cg(model, x, y)
out(model, x)
scg(model, x, y)
out(model, x)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
scg(model, x, y)
out(model, x)
scg(model, x, y)
out(model, x)
cg(model, x, y)
out(model, x)
cg(model, x, y)
out(model, x)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 2, 4, "tansig")
addLayer(model, 4,2, "purelim")
bp(net = modelo, input = x, output = y, epochs = 100, acceleration = "momentum_rumelhart", acc_param = 0.9)
bp(net = model, input = x, output = y, epochs = 100, acceleration = "momentum_rumelhart", acc_param = 0.9)
bp(net = model, input = x, output = y, epochs = 100, acceleration = "momentum_rumelhart", acc_param = 0.9)
out(model, x)
View(y)
View(x)
View(x)
model_scg <- getFeedforward()
addLayer(model_scg, 2, 4, "tansig")
addLayer(model_scg, 4,2, "purelim")
scg(model_scg, x, y, epochs = 100)
out(model_scg, x)
scg(model_scg, x, y, epochs = 100)
out(model_scg, x)
model_cg <- getFeedforward()
addLayer(model_cg, 2, 4, "tansig")
addLayer(model_cg, 4,2, "purelim")
cg(model_cg, x, y, epochs = 100)
cg(model_cg, x, y, epochs = 100)
cg(model_cg, x, y, epochs = 100)
out(model_cg, x)
model_sgd<-getFeedforward()
addLayer(model_sgd, 2,4,"tansig")
addLayer(model_sgd, 4,2,"purelim")
sgd(model_sgd, x, y, 100, 0, "momentum_rumelhart", 0.9)
sgd(model_sgd, x, y, 100, 0, "momentum_rumelhart", 0.9)
out(model_sgd, x)
data("iris")
iris <- iris[sample(1:nrow(iris),length(1:nrow(iris))),1:ncol(iris)]
View(iris)
View(iris)
irisValues <- iris[,1:4]
irisTargets <- decodeClassLabels(iris[,5])
library(RSNNS)
irisTargets <- decodeClassLabels(iris[,5])
irisTargets
View(irisTargets)
iris <- splitForTrainingAndTest(irisValues, irisTargets, ratio=0.15)
iris <- normTrainingAndTestSet(iris)
View(iris)
iris$inputsTrain
model <- mlp(iris$inputsTrain, iris$targetsTrain, size=5, learnFuncParams=c(0.1),
maxit=50, inputsTest=iris$inputsTest, targetsTest=iris$targetsTest)
summary(model)
model
View(irisTargets)
irisTargets
model <- getFeedforward()
addLayer(model, 3, 6, "tansig")
model <- getFeedforward()
addLayer(model, 4, 6, "tansig")
addLayer(model, 6, 3, "softmax")
bp(model, input = iris$inputsTrain, output = iris$targetsTrain, epochs = 100,acceleration = "momentum_rumelhart", acc_param = 0.9)
bp(model, input = iris$inputsTrain, output = iris$targetsTrain, epochs = 100,acceleration = "momentum_rumelhart", acc_param = 0.9)
bp(net = model, input = iris$inputsTrain, output = iris$targetsTrain, epochs = 100, acceleration = "momentum_rumelhart", acc_param = 0.9)
View(irisValues)
View(irisValues)
x = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
y = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_out_50000.csv", header = FALSE)
model<-getFeedforward()
x <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FLASE)
x <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
y <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_out_50000.csv", header = FALSE)
dim(x)
dim(y)
Y <- t(y)
Y
dim(Y)
X <- t(x)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 784, 300, "tansig")
addLayer(model, 300, 10, "logsig")
sgd(net = model, input = X, output = Y, epochs = 4, batch_size = 10, acceleration = "momentum_rumelhart", acc_param = 0.9)
library(FroogNeuralNetwork)
model <- getFeedforward()
addLayer(model, 784, 300, "tansig")
addLayer(model, 300, 10, "logsig")
x <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
y <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_out_50000.csv", header = FALSE)
Y <- t(y)
X <- t(x)
sgd(net = model, input = X, output = Y, epochs = 4, batch_size = 10, acceleration = "momentum_rumelhart", acc_param = 0.9)
X <- as.numeric(X)
Y <- as.numeric(Y)
sgd(net = model, input = X, output = Y, epochs = 4, batch_size = 10, acceleration = "momentum_rumelhart", acc_param = 0.9)
X <- as.matrix(X)
Y <- as.matrix(Y)
dim(X)
Y<-as.matrix.data.frame(Y)
Y
dim(Y)
library(FroogNeuralNetwork)
model <- getFeedforward()
library(FroogNeuralNetwork)
add(3, 4)
install.packages("roxygen2")
install.packages("ggplot2")
library(FroogNeuralNetwork)
modelo <- getFeedforward()
library(FroogNeuralNetwork)
modelo <- getFeedforward()
addLayer(modelo, 2, 4, "tansig")
addLayer(modelo, 4, 2, "purelim")
out(modelo, x)
bp(modelo, input = x, output = y, epochs = 100)
out(modelo, x)
install.packages("roxygen2")
library(roxygen2)
install.packages(c("cli", "commonmark", "digest", "fansi", "pkgbuild", "pkgload", "ps", "R6", "Rcpp", "rstudioapi"))
install.packages("roxygen2")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
remove.packages(rJava)
install.packages("rJava")
library("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(FroogNeuralNetwork)
library(FroogNeuralNetwork)
library("rJava", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library(FroogNeuralNetwork)
a
oneHot(a)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
library(FroogNeuralNetwork)
a = {"hola","mundo"}
a = c("hola","mundo")
a
library(FroogNeuralNetwork)
oneHot(a)
a
print(a)
library(FroogNeuralNetwork)
oneHot(a)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
tags = c("hola","mundo", "hola", "matias")
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
install.packages("Rdconv")
install.packages(c("cli", "commonmark", "digest", "dplyr", "fansi", "ggplot2", "pkgbuild", "pkgload", "ps", "R6", "Rcpp", "rlang", "rstudioapi"))
install.packages("roxygen2")
install.packages("xml2")
install.packages("XML2R")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
install.packages(c('curl'))
install.packages("curl")
install.packages("roxygen2")
install.packages("roxygen2")
library(FroogNeuralNetwork)
install.packages("devtools")
install.packages("devtools")
library(FroogNeuralNetwork)
library(FroogNeuralNetwork)
library(FroogNeuralNetwork)
library("RSNNS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library(FroogNeuralNetwork)
tags
oneHot(tags = )
oneHot(tags = tags)
nombres = c("pedro", "jorge", "matias", "ana", "diego")
oneHot(tags = nombres)
install.packages(c("cli", "digest", "dplyr", "fansi", "ggplot2", "R6", "Rcpp", "rlang", "tidyr", "tidyselect"))
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
clear
clean
nombres = c("pedro", "jorge", "matias", "ana", "diego")
oneHot(tags = nombres)
library(FroogNeuralNetwork)
nombres = c("pedro", "jorge", "matias", "ana", "diego")
oneHot(tags = nombres)
library(FroogNeuralNetwork)
oneHot(tags = nombres)
iris <- load(iris)
data("iris")
iris
iris
View(iris)
x <- iris[,1:4]
View(x)
y <- iris[,5]
View(y)
y <- oneHot(y)
View(y)
model <- sequencial_model()
addLayer(model, 4, 10, "tansig")
addLayer(model, 10, 3, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 100)
bp(net = model, input = t(x), output = t(y), epochs = 1000)
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = crossEntropy)
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy")
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(model, 4, 10, "tansig")
addLayer(model, 10, 3, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 100, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
x = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
y = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_out_50000.csv", header = FALSE)
x <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FLASE)
x = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 10, 100, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.numeric(x)), output = t(as.numeric(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
options(java.parameters = "-Xmx8g")
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
options(java.parameters = "-Xmx8g")
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
scg(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 5)
scg(net = model, input = t(as.numeric(as.matrix(x))), output = t(as.numeric(as.matrix(y))), epochs = 5)
scg(net = model, input = t(as.numeric(as.matrix(x))), output = t(as.numeric(as.matrix(y))), epochs = 5)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
scg(net = model, input = t(x), output = t(y), epochs = 5)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
scg(net = model, input = t(x), output = t(y), epochs = 5, loss_function = "crossEntropy", accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "adam", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "adam", acc_param = 0.9, accuracy = TRUE)
