bp(modelo, input = x, output = y, epochs = 100)
out(modelo, x)
install.packages("roxygen2")
library(roxygen2)
install.packages(c("cli", "commonmark", "digest", "fansi", "pkgbuild", "pkgload", "ps", "R6", "Rcpp", "rstudioapi"))
install.packages("roxygen2")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
remove.packages(rJava)
install.packages("rJava")
library("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(FroogNeuralNetwork)
library(FroogNeuralNetwork)
library("rJava", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library(FroogNeuralNetwork)
a
oneHot(a)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
library(FroogNeuralNetwork)
a = {"hola","mundo"}
a = c("hola","mundo")
a
library(FroogNeuralNetwork)
oneHot(a)
a
print(a)
library(FroogNeuralNetwork)
oneHot(a)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
oneHot(a)
library(FroogNeuralNetwork)
oneHot(a)
tags = c("hola","mundo", "hola", "matias")
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
oneHot(tags = tags)
library(FroogNeuralNetwork)
oneHot(tags = tags)
install.packages("Rdconv")
install.packages(c("cli", "commonmark", "digest", "dplyr", "fansi", "ggplot2", "pkgbuild", "pkgload", "ps", "R6", "Rcpp", "rlang", "rstudioapi"))
install.packages("roxygen2")
install.packages("xml2")
install.packages("XML2R")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("roxygen2")
install.packages("devtools")
install.packages(c('curl'))
install.packages("curl")
install.packages("roxygen2")
install.packages("roxygen2")
library(FroogNeuralNetwork)
install.packages("devtools")
install.packages("devtools")
library(FroogNeuralNetwork)
library(FroogNeuralNetwork)
library(FroogNeuralNetwork)
library("RSNNS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
library(FroogNeuralNetwork)
tags
oneHot(tags = )
oneHot(tags = tags)
nombres = c("pedro", "jorge", "matias", "ana", "diego")
oneHot(tags = nombres)
install.packages(c("cli", "digest", "dplyr", "fansi", "ggplot2", "R6", "Rcpp", "rlang", "tidyr", "tidyselect"))
install.packages("roxygen2")
install.packages("roxygen2")
install.packages("devtools")
install.packages("devtools")
clear
clean
nombres = c("pedro", "jorge", "matias", "ana", "diego")
oneHot(tags = nombres)
library(FroogNeuralNetwork)
nombres = c("pedro", "jorge", "matias", "ana", "diego")
oneHot(tags = nombres)
library(FroogNeuralNetwork)
oneHot(tags = nombres)
iris <- load(iris)
data("iris")
iris
iris
View(iris)
x <- iris[,1:4]
View(x)
y <- iris[,5]
View(y)
y <- oneHot(y)
View(y)
model <- sequencial_model()
addLayer(model, 4, 10, "tansig")
addLayer(model, 10, 3, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 100)
bp(net = model, input = t(x), output = t(y), epochs = 1000)
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = crossEntropy)
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy")
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(model, 4, 10, "tansig")
addLayer(model, 10, 3, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 1000, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 100, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
x = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
y = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_out_50000.csv", header = FALSE)
x <- read.csv(file = "/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FLASE)
x = read.csv("/home/matias/NetBeansProjects/froog-examples/src/main/resources/mnist/mnist_train_in_50000.csv", header = FALSE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 10, 100, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.numeric(x)), output = t(as.numeric(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
options(java.parameters = "-Xmx8g")
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
options(java.parameters = "-Xmx8g")
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 10, loss_function = "crossEntropy", acceleration = "momentum_rumelhart", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
scg(net = model, input = t(as.matrix(x)), output = t(as.matrix(y)), epochs = 5)
scg(net = model, input = t(as.numeric(as.matrix(x))), output = t(as.numeric(as.matrix(y))), epochs = 5)
scg(net = model, input = t(as.numeric(as.matrix(x))), output = t(as.numeric(as.matrix(y))), epochs = 5)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
scg(net = model, input = t(x), output = t(y), epochs = 5)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
scg(net = model, input = t(x), output = t(y), epochs = 5, loss_function = "crossEntropy", accuracy = TRUE)
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "adam", acc_param = 0.9, accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, 784, 300, "tansig")
addLayer(net=model, 300, 10, "softmax")
bp(net = model, input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", acceleration = "adam", acc_param = 0.9, accuracy = TRUE)
install.packages("rJava")
install.packages("roxygen2")
install.packages(c("foreign", "lattice", "MASS", "Matrix", "mgcv", "survival"))
install.packages("devtools")
library(FroogNeuralNetwork)
oneHot(tags = tags)
oneHot(tags = nombres)
install.packages("processx")
install.packages("processx")
install.packages("processx")
library(FroogNeuralNetwork)
R.Version()
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("roxygen2")
install.packages("devtools")
install.packages("processx")
install.packages("RSNNS")
install.packages("csv")
library(FroogNeuralNetwork)
X <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-in.csv"), sep = ",", header = FALSE)
y <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-out.csv"), sep = ",", header = FALSE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
=
library(FroogNeuralNetwork)
model <- sequencial_model()
library(FroogNeuralNetwork)
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
##scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
View(prediccion)
View(prediccion)
confusionMatrix(X, prediccion, TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
##scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
confusionMatrix(X, prediccion, TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
##scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
confusionMatrix(X, prediccion, TRUE)
X
confusionMatrix(y, prediccion, TRUE)
##scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
confusionMatrix(y, prediccion, TRUE)
##scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
confusionMatrix(y, prediccion, TRUE)
scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
##cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net = model,input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
##cg(net = model, input = t(X), output = t(y), epochs = 50, loss_function = "crossEntropy")
prediccion = t(out(net = model,matrix = t(X)))
confusionMatrix(y, prediccion, TRUE)
confusionMatrix(y, prediccion, FALSE)
library("RSNNS", lib.loc="~/R/R-3.5.1/library")
snnsModel <- mlp(x = x, y = y, size = 5, maxit = 50, learnFunc = "scg", hiddenActFunc = "Act_TanH")
x <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-in.csv"), sep = ",", header = FALSE)
snnsModel <- mlp(x = x, y = y, size = 5, maxit = 50, learnFunc = "scg", hiddenActFunc = "Act_TanH")
RSNNS::getSnnsRFunctionTable()
snnsModel <- mlp(x = x, y = y, size = 5, maxit = 50, learnFunc = "scg", hiddenActFunc = "Act_TanH")
snnsModel <- mlp(x = x, y = y, size = 5, maxit = 50, learnFunc = "SCG", hiddenActFunc = "Act_TanH")
yCal = predict(snnsModel, x)
yCal
confusionMatrix(y, yCal, TRUE)
confusionMatrix(y, yCal)
View(yCal)
as.matrix.data.frame(yCalc)
as.matrix(yCalc)
yCal = predict(snnsModel, x)
as.matrix(yCal)
confusionMatrix(y, as.matrix(yCal), TRUE)
confusionMatrix(y, as.matrix(yCal))
confusionMatrix(y, as.matrix.data.frame(yCal))
confusionMatrix(y, as.numeric(unlist(yCal)))
confusionMatrix(y, as.matrix(lapply(yCal, as.numeric)))
confusionMatrix(y, as.matrix(as.data.frame(lapply(yCal, as.numeric))))
confusionMatrix(y, prediccion, TRUE)
library("FroogNeuralNetwork", lib.loc="~/R/R-3.5.1/library")
confusionMatrix(y, prediccion, TRUE)
library(FroogNeuralNetwork)
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
x <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-in.csv"), sep = ",", header = FALSE)
y <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-out.csv"), sep = ",", header = FALSE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
library(FroogNeuralNetwork)
el <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
confusionMatrix(yObs = y, y = as.matrix.data.frame(yCal),binarize = TRUE)
addLayer(net = model,input = 5,neurons = 3,activation = "logsig")
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5,neurons = 3,activation = "logsig")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5, neurons = 3,activation = "logsig")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
r
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 10, activation = "tansig")
addLayer(net = model,input = 10, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
library(FroogNeuralNetwork)
confusionMatrix(yObs = y, y = as.matrix.data.frame(yCal),binarize = TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 10, activation = "tansig")
addLayer(net = model,input = 10, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
x <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-in.csv"), sep = ",", header = FALSE)
y <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/iris/iris-out.csv"), sep = ",", header = FALSE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 10, activation = "tansig")
addLayer(net = model,input = 10, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 10, activation = "tansig")
addLayer(net = model,input = 10, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 10, activation = "tansig")
addLayer(net = model,input = 10, neurons = 3,activation = "logsig")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5, neurons = 3,activation = "logsig")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
model <- sequencial_model()
addLayer(net = model, input = 4, neurons = 5, activation = "tansig")
addLayer(net = model,input = 5, neurons = 3,activation = "softmax")
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy",accuracy = TRUE)
prediccion = t(out(net = model,matrix = t(x)))
confusionMatrix(y, prediccion, TRUE)
start.time <- Sys.time()
snnsModel <- mlp(x = x, y = y, size = 300, maxit = 5, learnFunc = "SCG", hiddenActFunc = "Act_TanH")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
library("RSNNS", lib.loc="~/R/R-3.5.1/library")
start.time <- Sys.time()
snnsModel <- mlp(x = x, y = y, size = 300, maxit = 5, learnFunc = "SCG", hiddenActFunc = "Act_TanH")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
snnsModel <- mlp(x = x, y = y, size = 300, maxit = 5, learnFunc = "SCG", hiddenActFunc = "Act_TanH")
##levantamos los datos
x <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/mnist/mnist_train_in_50000.csv
"), sep = ",", header = FALSE)
y <- read.csv(url("https://raw.githubusercontent.com/mroodschild/froog-examples/master/src/main/resources/mnist/mnist_train_out_50000.csv
"), sep = ",", header = FALSE)
library(FroogNeuralNetwork)
##generamos el modelo
model <- sequencial_model()
addLayer(net = model, input = 784, neurons = 300, activation = "tansig")
addLayer(net = model, input = 300, neurons = 10, activation = "logsig")
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "rmse", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
model <- sequencial_model()
addLayer(net = model, input = 784, neurons = 300, activation = "tansig")
addLayer(net = model, input = 300, neurons = 10, activation = "softmax")
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 50, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
library("RSNNS", lib.loc="~/R/R-3.5.1/library")
start.time <- Sys.time()
snnsModel <- mlp(x = x, y = y, size = 300, maxit = 1, learnFunc = "SCG", hiddenActFunc = "Act_TanH")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
install.packages("~/NetBeansProjects/froog/FroogNeuralNetwork_0.4.0.zip", repos = NULL, type = "win.binary")
library("FroogNeuralNetwork", lib.loc="~/R/R-3.5.1/library")
model <- sequencial_model()
addLayer(net = model, input = 784, neurons = 300, activation = "tansig")
addLayer(net = model, input = 300, neurons = 10, activation = "softmax")
options(java.parameters = "-Xmx8000m")
library("FroogNeuralNetwork", lib.loc="~/R/R-3.5.1/library")
model <- sequencial_model()
addLayer(net = model, input = 784, neurons = 300, activation = "tansig")
addLayer(net = model, input = 300, neurons = 10, activation = "softmax")
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 2, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 1, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
detach("package:FroogNeuralNetwork", unload=TRUE)
library("FroogNeuralNetwork", lib.loc="~/R/R-3.5.1/library")
library("RSNNS", lib.loc="~/R/R-3.5.1/library")
start.time <- Sys.time()
snnsModel <- mlp(x = x, y = y, size = 300, maxit = 10, learnFunc = "SCG", hiddenActFunc = "Act_TanH")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
detach("package:RSNNS", unload=TRUE)
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 784, neurons = 300, activation = "tansig")
addLayer(net = model, input = 300, neurons = 10, activation = "softmax")
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 2, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 2, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
options(java.parameters = "-Xmx8g")
library(FroogNeuralNetwork)
model <- sequencial_model()
addLayer(net = model, input = 784, neurons = 300, activation = "tansig")
addLayer(net = model, input = 300, neurons = 10, activation = "softmax")
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 2, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
scg(net = model,input = t(x), output = t(y), epochs = 10, loss_function = "crossEntropy", accuracy = FALSE)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
